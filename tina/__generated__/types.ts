//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blog: Blog;
  blogConnection: BlogConnection;
  enduro_event: Enduro_Event;
  enduro_eventConnection: Enduro_EventConnection;
  harescramble_event: Harescramble_Event;
  harescramble_eventConnection: Harescramble_EventConnection;
  fastkidz_event: Fastkidz_Event;
  fastkidz_eventConnection: Fastkidz_EventConnection;
  special_event: Special_Event;
  special_eventConnection: Special_EventConnection;
  dual_sport: Dual_Sport;
  dual_sportConnection: Dual_SportConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryEnduro_EventArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryEnduro_EventConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Enduro_EventFilter>;
};


export type QueryHarescramble_EventArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHarescramble_EventConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Harescramble_EventFilter>;
};


export type QueryFastkidz_EventArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFastkidz_EventConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Fastkidz_EventFilter>;
};


export type QuerySpecial_EventArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySpecial_EventConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Special_EventFilter>;
};


export type QueryDual_SportArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDual_SportConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Dual_SportFilter>;
};

export type DocumentFilter = {
  blog?: InputMaybe<BlogFilter>;
  enduro_event?: InputMaybe<Enduro_EventFilter>;
  harescramble_event?: InputMaybe<Harescramble_EventFilter>;
  fastkidz_event?: InputMaybe<Fastkidz_EventFilter>;
  special_event?: InputMaybe<Special_EventFilter>;
  dual_sport?: InputMaybe<Dual_SportFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Blog | Enduro_Event | Harescramble_Event | Fastkidz_Event | Special_Event | Dual_Sport | Folder;

export type Blog = Node & Document & {
  __typename?: 'Blog';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title: Scalars['String']['output'];
  author: Scalars['String']['output'];
  date: Scalars['String']['output'];
  image: Scalars['String']['output'];
  bg_image: Scalars['String']['output'];
  categories?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  description: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  image?: InputMaybe<ImageFilter>;
  bg_image?: InputMaybe<ImageFilter>;
  categories?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type Enduro_Event = Node & Document & {
  __typename?: 'Enduro_event';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  club?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  event_datetime: Scalars['String']['output'];
  location: Scalars['String']['output'];
  event_format: Array<Scalars['String']['output']>;
  closed_course: Array<Scalars['String']['output']>;
  gas_away?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  start_grid?: Maybe<Scalars['String']['output']>;
  key_time?: Maybe<Scalars['String']['output']>;
  check_in_time?: Maybe<Scalars['String']['output']>;
  registration_date?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  preview_image: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Enduro_EventFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  club?: InputMaybe<StringFilter>;
  event_datetime?: InputMaybe<DatetimeFilter>;
  location?: InputMaybe<StringFilter>;
  event_format?: InputMaybe<StringFilter>;
  closed_course?: InputMaybe<StringFilter>;
  gas_away?: InputMaybe<StringFilter>;
  start_grid?: InputMaybe<StringFilter>;
  key_time?: InputMaybe<DatetimeFilter>;
  check_in_time?: InputMaybe<DatetimeFilter>;
  registration_date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  preview_image?: InputMaybe<ImageFilter>;
};

export type Enduro_EventConnectionEdges = {
  __typename?: 'Enduro_eventConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Enduro_Event>;
};

export type Enduro_EventConnection = Connection & {
  __typename?: 'Enduro_eventConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Enduro_EventConnectionEdges>>>;
};

export type Harescramble_Event = Node & Document & {
  __typename?: 'Harescramble_event';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  club?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  event_datetime: Scalars['String']['output'];
  location: Scalars['String']['output'];
  check_in_time?: Maybe<Scalars['String']['output']>;
  registration_date?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  preview_image: Scalars['String']['output'];
  flyer?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Harescramble_EventFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  club?: InputMaybe<StringFilter>;
  event_datetime?: InputMaybe<DatetimeFilter>;
  location?: InputMaybe<StringFilter>;
  check_in_time?: InputMaybe<DatetimeFilter>;
  registration_date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  preview_image?: InputMaybe<ImageFilter>;
  flyer?: InputMaybe<ImageFilter>;
};

export type Harescramble_EventConnectionEdges = {
  __typename?: 'Harescramble_eventConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Harescramble_Event>;
};

export type Harescramble_EventConnection = Connection & {
  __typename?: 'Harescramble_eventConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Harescramble_EventConnectionEdges>>>;
};

export type Fastkidz_Event = Node & Document & {
  __typename?: 'Fastkidz_event';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  club?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  event_datetime: Scalars['String']['output'];
  location: Scalars['String']['output'];
  check_in_time?: Maybe<Scalars['String']['output']>;
  registration_date?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  preview_image: Scalars['String']['output'];
  flyer?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Fastkidz_EventFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  club?: InputMaybe<StringFilter>;
  event_datetime?: InputMaybe<DatetimeFilter>;
  location?: InputMaybe<StringFilter>;
  check_in_time?: InputMaybe<DatetimeFilter>;
  registration_date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  preview_image?: InputMaybe<ImageFilter>;
  flyer?: InputMaybe<ImageFilter>;
};

export type Fastkidz_EventConnectionEdges = {
  __typename?: 'Fastkidz_eventConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Fastkidz_Event>;
};

export type Fastkidz_EventConnection = Connection & {
  __typename?: 'Fastkidz_eventConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Fastkidz_EventConnectionEdges>>>;
};

export type Special_Event = Node & Document & {
  __typename?: 'Special_event';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  club?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  event_datetime: Scalars['String']['output'];
  location: Scalars['String']['output'];
  check_in_time?: Maybe<Scalars['String']['output']>;
  registration_date?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  preview_image: Scalars['String']['output'];
  flyer?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Special_EventFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  club?: InputMaybe<StringFilter>;
  event_datetime?: InputMaybe<DatetimeFilter>;
  location?: InputMaybe<StringFilter>;
  check_in_time?: InputMaybe<DatetimeFilter>;
  registration_date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  preview_image?: InputMaybe<ImageFilter>;
  flyer?: InputMaybe<ImageFilter>;
};

export type Special_EventConnectionEdges = {
  __typename?: 'Special_eventConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Special_Event>;
};

export type Special_EventConnection = Connection & {
  __typename?: 'Special_eventConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Special_EventConnectionEdges>>>;
};

export type Dual_Sport = Node & Document & {
  __typename?: 'Dual_sport';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  club?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  event_datetime: Scalars['String']['output'];
  location: Scalars['String']['output'];
  check_in_time?: Maybe<Scalars['String']['output']>;
  registration_date?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  preview_image: Scalars['String']['output'];
  flyer?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Dual_SportFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  club?: InputMaybe<StringFilter>;
  event_datetime?: InputMaybe<DatetimeFilter>;
  location?: InputMaybe<StringFilter>;
  check_in_time?: InputMaybe<DatetimeFilter>;
  registration_date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
  preview_image?: InputMaybe<ImageFilter>;
  flyer?: InputMaybe<ImageFilter>;
};

export type Dual_SportConnectionEdges = {
  __typename?: 'Dual_sportConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Dual_Sport>;
};

export type Dual_SportConnection = Connection & {
  __typename?: 'Dual_sportConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Dual_SportConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateBlog: Blog;
  createBlog: Blog;
  updateEnduro_event: Enduro_Event;
  createEnduro_event: Enduro_Event;
  updateHarescramble_event: Harescramble_Event;
  createHarescramble_event: Harescramble_Event;
  updateFastkidz_event: Fastkidz_Event;
  createFastkidz_event: Fastkidz_Event;
  updateSpecial_event: Special_Event;
  createSpecial_event: Special_Event;
  updateDual_sport: Dual_Sport;
  createDual_sport: Dual_Sport;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdateEnduro_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Enduro_EventMutation;
};


export type MutationCreateEnduro_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Enduro_EventMutation;
};


export type MutationUpdateHarescramble_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Harescramble_EventMutation;
};


export type MutationCreateHarescramble_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Harescramble_EventMutation;
};


export type MutationUpdateFastkidz_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Fastkidz_EventMutation;
};


export type MutationCreateFastkidz_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Fastkidz_EventMutation;
};


export type MutationUpdateSpecial_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Special_EventMutation;
};


export type MutationCreateSpecial_EventArgs = {
  relativePath: Scalars['String']['input'];
  params: Special_EventMutation;
};


export type MutationUpdateDual_SportArgs = {
  relativePath: Scalars['String']['input'];
  params: Dual_SportMutation;
};


export type MutationCreateDual_SportArgs = {
  relativePath: Scalars['String']['input'];
  params: Dual_SportMutation;
};

export type DocumentUpdateMutation = {
  blog?: InputMaybe<BlogMutation>;
  enduro_event?: InputMaybe<Enduro_EventMutation>;
  harescramble_event?: InputMaybe<Harescramble_EventMutation>;
  fastkidz_event?: InputMaybe<Fastkidz_EventMutation>;
  special_event?: InputMaybe<Special_EventMutation>;
  dual_sport?: InputMaybe<Dual_SportMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  blog?: InputMaybe<BlogMutation>;
  enduro_event?: InputMaybe<Enduro_EventMutation>;
  harescramble_event?: InputMaybe<Harescramble_EventMutation>;
  fastkidz_event?: InputMaybe<Fastkidz_EventMutation>;
  special_event?: InputMaybe<Special_EventMutation>;
  dual_sport?: InputMaybe<Dual_SportMutation>;
};

export type BlogMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  bg_image?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  description?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type Enduro_EventMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  club?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  event_datetime?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  event_format?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  closed_course?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  gas_away?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  start_grid?: InputMaybe<Scalars['String']['input']>;
  key_time?: InputMaybe<Scalars['String']['input']>;
  check_in_time?: InputMaybe<Scalars['String']['input']>;
  registration_date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  preview_image?: InputMaybe<Scalars['String']['input']>;
};

export type Harescramble_EventMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  club?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  event_datetime?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  check_in_time?: InputMaybe<Scalars['String']['input']>;
  registration_date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  preview_image?: InputMaybe<Scalars['String']['input']>;
  flyer?: InputMaybe<Scalars['String']['input']>;
};

export type Fastkidz_EventMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  club?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  event_datetime?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  check_in_time?: InputMaybe<Scalars['String']['input']>;
  registration_date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  preview_image?: InputMaybe<Scalars['String']['input']>;
  flyer?: InputMaybe<Scalars['String']['input']>;
};

export type Special_EventMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  club?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  event_datetime?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  check_in_time?: InputMaybe<Scalars['String']['input']>;
  registration_date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  preview_image?: InputMaybe<Scalars['String']['input']>;
  flyer?: InputMaybe<Scalars['String']['input']>;
};

export type Dual_SportMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  club?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  event_datetime?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  check_in_time?: InputMaybe<Scalars['String']['input']>;
  registration_date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  preview_image?: InputMaybe<Scalars['String']['input']>;
  flyer?: InputMaybe<Scalars['String']['input']>;
};

export type BlogPartsFragment = { __typename: 'Blog', draft?: boolean | null, title: string, author: string, date: string, image: string, bg_image: string, categories?: Array<string | null> | null, description: string, tags: Array<string>, body?: any | null };

export type Enduro_EventPartsFragment = { __typename: 'Enduro_event', title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, event_format: Array<string>, closed_course: Array<string>, gas_away?: Array<string | null> | null, start_grid?: string | null, key_time?: string | null, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string };

export type Harescramble_EventPartsFragment = { __typename: 'Harescramble_event', title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null };

export type Fastkidz_EventPartsFragment = { __typename: 'Fastkidz_event', title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null };

export type Special_EventPartsFragment = { __typename: 'Special_event', title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null };

export type Dual_SportPartsFragment = { __typename: 'Dual_sport', title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, draft?: boolean | null, title: string, author: string, date: string, image: string, bg_image: string, categories?: Array<string | null> | null, description: string, tags: Array<string>, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, draft?: boolean | null, title: string, author: string, date: string, image: string, bg_image: string, categories?: Array<string | null> | null, description: string, tags: Array<string>, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Enduro_EventQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Enduro_EventQuery = { __typename?: 'Query', enduro_event: { __typename: 'Enduro_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, event_format: Array<string>, closed_course: Array<string>, gas_away?: Array<string | null> | null, start_grid?: string | null, key_time?: string | null, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Enduro_EventConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Enduro_EventFilter>;
}>;


export type Enduro_EventConnectionQuery = { __typename?: 'Query', enduro_eventConnection: { __typename?: 'Enduro_eventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Enduro_eventConnectionEdges', cursor: string, node?: { __typename: 'Enduro_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, event_format: Array<string>, closed_course: Array<string>, gas_away?: Array<string | null> | null, start_grid?: string | null, key_time?: string | null, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Harescramble_EventQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Harescramble_EventQuery = { __typename?: 'Query', harescramble_event: { __typename: 'Harescramble_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Harescramble_EventConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Harescramble_EventFilter>;
}>;


export type Harescramble_EventConnectionQuery = { __typename?: 'Query', harescramble_eventConnection: { __typename?: 'Harescramble_eventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Harescramble_eventConnectionEdges', cursor: string, node?: { __typename: 'Harescramble_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Fastkidz_EventQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Fastkidz_EventQuery = { __typename?: 'Query', fastkidz_event: { __typename: 'Fastkidz_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Fastkidz_EventConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Fastkidz_EventFilter>;
}>;


export type Fastkidz_EventConnectionQuery = { __typename?: 'Query', fastkidz_eventConnection: { __typename?: 'Fastkidz_eventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Fastkidz_eventConnectionEdges', cursor: string, node?: { __typename: 'Fastkidz_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Special_EventQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Special_EventQuery = { __typename?: 'Query', special_event: { __typename: 'Special_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Special_EventConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Special_EventFilter>;
}>;


export type Special_EventConnectionQuery = { __typename?: 'Query', special_eventConnection: { __typename?: 'Special_eventConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Special_eventConnectionEdges', cursor: string, node?: { __typename: 'Special_event', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type Dual_SportQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Dual_SportQuery = { __typename?: 'Query', dual_sport: { __typename: 'Dual_sport', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type Dual_SportConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Dual_SportFilter>;
}>;


export type Dual_SportConnectionQuery = { __typename?: 'Query', dual_sportConnection: { __typename?: 'Dual_sportConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Dual_sportConnectionEdges', cursor: string, node?: { __typename: 'Dual_sport', id: string, title: string, description: string, club?: Array<string | null> | null, event_datetime: string, location: string, check_in_time?: string | null, registration_date?: string | null, body: any, preview_image: string, flyer?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  draft
  title
  author
  date
  image
  bg_image
  categories
  description
  tags
  body
}
    `;
export const Enduro_EventPartsFragmentDoc = gql`
    fragment Enduro_eventParts on Enduro_event {
  __typename
  title
  description
  club
  event_datetime
  location
  event_format
  closed_course
  gas_away
  start_grid
  key_time
  check_in_time
  registration_date
  body
  preview_image
}
    `;
export const Harescramble_EventPartsFragmentDoc = gql`
    fragment Harescramble_eventParts on Harescramble_event {
  __typename
  title
  description
  club
  event_datetime
  location
  check_in_time
  registration_date
  body
  preview_image
  flyer
}
    `;
export const Fastkidz_EventPartsFragmentDoc = gql`
    fragment Fastkidz_eventParts on Fastkidz_event {
  __typename
  title
  description
  club
  event_datetime
  location
  check_in_time
  registration_date
  body
  preview_image
  flyer
}
    `;
export const Special_EventPartsFragmentDoc = gql`
    fragment Special_eventParts on Special_event {
  __typename
  title
  description
  club
  event_datetime
  location
  check_in_time
  registration_date
  body
  preview_image
  flyer
}
    `;
export const Dual_SportPartsFragmentDoc = gql`
    fragment Dual_sportParts on Dual_sport {
  __typename
  title
  description
  club
  event_datetime
  location
  check_in_time
  registration_date
  body
  preview_image
  flyer
}
    `;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const Enduro_EventDocument = gql`
    query enduro_event($relativePath: String!) {
  enduro_event(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Enduro_eventParts
  }
}
    ${Enduro_EventPartsFragmentDoc}`;
export const Enduro_EventConnectionDocument = gql`
    query enduro_eventConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Enduro_eventFilter) {
  enduro_eventConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Enduro_eventParts
      }
    }
  }
}
    ${Enduro_EventPartsFragmentDoc}`;
export const Harescramble_EventDocument = gql`
    query harescramble_event($relativePath: String!) {
  harescramble_event(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Harescramble_eventParts
  }
}
    ${Harescramble_EventPartsFragmentDoc}`;
export const Harescramble_EventConnectionDocument = gql`
    query harescramble_eventConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Harescramble_eventFilter) {
  harescramble_eventConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Harescramble_eventParts
      }
    }
  }
}
    ${Harescramble_EventPartsFragmentDoc}`;
export const Fastkidz_EventDocument = gql`
    query fastkidz_event($relativePath: String!) {
  fastkidz_event(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Fastkidz_eventParts
  }
}
    ${Fastkidz_EventPartsFragmentDoc}`;
export const Fastkidz_EventConnectionDocument = gql`
    query fastkidz_eventConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Fastkidz_eventFilter) {
  fastkidz_eventConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Fastkidz_eventParts
      }
    }
  }
}
    ${Fastkidz_EventPartsFragmentDoc}`;
export const Special_EventDocument = gql`
    query special_event($relativePath: String!) {
  special_event(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Special_eventParts
  }
}
    ${Special_EventPartsFragmentDoc}`;
export const Special_EventConnectionDocument = gql`
    query special_eventConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Special_eventFilter) {
  special_eventConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Special_eventParts
      }
    }
  }
}
    ${Special_EventPartsFragmentDoc}`;
export const Dual_SportDocument = gql`
    query dual_sport($relativePath: String!) {
  dual_sport(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Dual_sportParts
  }
}
    ${Dual_SportPartsFragmentDoc}`;
export const Dual_SportConnectionDocument = gql`
    query dual_sportConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Dual_sportFilter) {
  dual_sportConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Dual_sportParts
      }
    }
  }
}
    ${Dual_SportPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    enduro_event(variables: Enduro_EventQueryVariables, options?: C): Promise<{data: Enduro_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Enduro_EventQueryVariables, query: string}> {
        return requester<{data: Enduro_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Enduro_EventQueryVariables, query: string}, Enduro_EventQueryVariables>(Enduro_EventDocument, variables, options);
      },
    enduro_eventConnection(variables?: Enduro_EventConnectionQueryVariables, options?: C): Promise<{data: Enduro_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Enduro_EventConnectionQueryVariables, query: string}> {
        return requester<{data: Enduro_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Enduro_EventConnectionQueryVariables, query: string}, Enduro_EventConnectionQueryVariables>(Enduro_EventConnectionDocument, variables, options);
      },
    harescramble_event(variables: Harescramble_EventQueryVariables, options?: C): Promise<{data: Harescramble_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Harescramble_EventQueryVariables, query: string}> {
        return requester<{data: Harescramble_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Harescramble_EventQueryVariables, query: string}, Harescramble_EventQueryVariables>(Harescramble_EventDocument, variables, options);
      },
    harescramble_eventConnection(variables?: Harescramble_EventConnectionQueryVariables, options?: C): Promise<{data: Harescramble_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Harescramble_EventConnectionQueryVariables, query: string}> {
        return requester<{data: Harescramble_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Harescramble_EventConnectionQueryVariables, query: string}, Harescramble_EventConnectionQueryVariables>(Harescramble_EventConnectionDocument, variables, options);
      },
    fastkidz_event(variables: Fastkidz_EventQueryVariables, options?: C): Promise<{data: Fastkidz_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Fastkidz_EventQueryVariables, query: string}> {
        return requester<{data: Fastkidz_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Fastkidz_EventQueryVariables, query: string}, Fastkidz_EventQueryVariables>(Fastkidz_EventDocument, variables, options);
      },
    fastkidz_eventConnection(variables?: Fastkidz_EventConnectionQueryVariables, options?: C): Promise<{data: Fastkidz_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Fastkidz_EventConnectionQueryVariables, query: string}> {
        return requester<{data: Fastkidz_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Fastkidz_EventConnectionQueryVariables, query: string}, Fastkidz_EventConnectionQueryVariables>(Fastkidz_EventConnectionDocument, variables, options);
      },
    special_event(variables: Special_EventQueryVariables, options?: C): Promise<{data: Special_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Special_EventQueryVariables, query: string}> {
        return requester<{data: Special_EventQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Special_EventQueryVariables, query: string}, Special_EventQueryVariables>(Special_EventDocument, variables, options);
      },
    special_eventConnection(variables?: Special_EventConnectionQueryVariables, options?: C): Promise<{data: Special_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Special_EventConnectionQueryVariables, query: string}> {
        return requester<{data: Special_EventConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Special_EventConnectionQueryVariables, query: string}, Special_EventConnectionQueryVariables>(Special_EventConnectionDocument, variables, options);
      },
    dual_sport(variables: Dual_SportQueryVariables, options?: C): Promise<{data: Dual_SportQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Dual_SportQueryVariables, query: string}> {
        return requester<{data: Dual_SportQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Dual_SportQueryVariables, query: string}, Dual_SportQueryVariables>(Dual_SportDocument, variables, options);
      },
    dual_sportConnection(variables?: Dual_SportConnectionQueryVariables, options?: C): Promise<{data: Dual_SportConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Dual_SportConnectionQueryVariables, query: string}> {
        return requester<{data: Dual_SportConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Dual_SportConnectionQueryVariables, query: string}, Dual_SportConnectionQueryVariables>(Dual_SportConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string }
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    })

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string
  }
) => {
  const requester = generateRequester(client, options)
  return getSdk(requester)
}

  