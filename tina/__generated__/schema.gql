# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  enduro_event(relativePath: String): Enduro_event!
  enduro_eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Enduro_eventFilter): Enduro_eventConnection!
  harescramble_event(relativePath: String): Harescramble_event!
  harescramble_eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Harescramble_eventFilter): Harescramble_eventConnection!
  fastkidz_event(relativePath: String): Fastkidz_event!
  fastkidz_eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Fastkidz_eventFilter): Fastkidz_eventConnection!
  special_event(relativePath: String): Special_event!
  special_eventConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Special_eventFilter): Special_eventConnection!
  dual_sport(relativePath: String): Dual_sport!
  dual_sportConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: Dual_sportFilter): Dual_sportConnection!
}

input DocumentFilter {
  blog: BlogFilter
  enduro_event: Enduro_eventFilter
  harescramble_event: Harescramble_eventFilter
  fastkidz_event: Fastkidz_eventFilter
  special_event: Special_eventFilter
  dual_sport: Dual_sportFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Blog | Enduro_event | Harescramble_event | Fastkidz_event | Special_event | Dual_sport | Folder

type Blog implements Node & Document {
  draft: Boolean
  title: String!
  author: String!
  date: String!
  image: String!
  bg_image: String!
  categories: [String]
  description: String!
  tags: [String!]!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BlogFilter {
  draft: BooleanFilter
  title: StringFilter
  author: StringFilter
  date: DatetimeFilter
  image: ImageFilter
  bg_image: ImageFilter
  categories: StringFilter
  description: StringFilter
  tags: StringFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Enduro_event implements Node & Document {
  title: String!
  description: String!
  club: [String]
  event_datetime: String!
  location: String!
  event_format: [String!]!
  closed_course: [String!]!
  gas_away: [String]
  start_grid: String
  key_time: String
  check_in_time: String
  registration_date: String
  body: JSON!
  preview_image: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Enduro_eventFilter {
  title: StringFilter
  description: StringFilter
  club: StringFilter
  event_datetime: DatetimeFilter
  location: StringFilter
  event_format: StringFilter
  closed_course: StringFilter
  gas_away: StringFilter
  start_grid: StringFilter
  key_time: DatetimeFilter
  check_in_time: DatetimeFilter
  registration_date: DatetimeFilter
  body: RichTextFilter
  preview_image: ImageFilter
}

type Enduro_eventConnectionEdges {
  cursor: String!
  node: Enduro_event
}

type Enduro_eventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Enduro_eventConnectionEdges]
}

type Harescramble_event implements Node & Document {
  title: String!
  description: String!
  club: [String]
  event_datetime: String!
  location: String!
  check_in_time: String
  registration_date: String
  body: JSON!
  preview_image: String!
  flyer: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Harescramble_eventFilter {
  title: StringFilter
  description: StringFilter
  club: StringFilter
  event_datetime: DatetimeFilter
  location: StringFilter
  check_in_time: DatetimeFilter
  registration_date: DatetimeFilter
  body: RichTextFilter
  preview_image: ImageFilter
  flyer: ImageFilter
}

type Harescramble_eventConnectionEdges {
  cursor: String!
  node: Harescramble_event
}

type Harescramble_eventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Harescramble_eventConnectionEdges]
}

type Fastkidz_event implements Node & Document {
  title: String!
  description: String!
  club: [String]
  event_datetime: String!
  location: String!
  check_in_time: String
  registration_date: String
  body: JSON!
  preview_image: String!
  flyer: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Fastkidz_eventFilter {
  title: StringFilter
  description: StringFilter
  club: StringFilter
  event_datetime: DatetimeFilter
  location: StringFilter
  check_in_time: DatetimeFilter
  registration_date: DatetimeFilter
  body: RichTextFilter
  preview_image: ImageFilter
  flyer: ImageFilter
}

type Fastkidz_eventConnectionEdges {
  cursor: String!
  node: Fastkidz_event
}

type Fastkidz_eventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Fastkidz_eventConnectionEdges]
}

type Special_event implements Node & Document {
  title: String!
  description: String!
  club: [String]
  event_datetime: String!
  location: String!
  check_in_time: String
  registration_date: String
  body: JSON!
  preview_image: String!
  flyer: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Special_eventFilter {
  title: StringFilter
  description: StringFilter
  club: StringFilter
  event_datetime: DatetimeFilter
  location: StringFilter
  check_in_time: DatetimeFilter
  registration_date: DatetimeFilter
  body: RichTextFilter
  preview_image: ImageFilter
  flyer: ImageFilter
}

type Special_eventConnectionEdges {
  cursor: String!
  node: Special_event
}

type Special_eventConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Special_eventConnectionEdges]
}

type Dual_sport implements Node & Document {
  title: String!
  description: String!
  club: [String]
  event_datetime: String!
  location: String!
  check_in_time: String
  registration_date: String
  body: JSON!
  preview_image: String!
  flyer: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input Dual_sportFilter {
  title: StringFilter
  description: StringFilter
  club: StringFilter
  event_datetime: DatetimeFilter
  location: StringFilter
  check_in_time: DatetimeFilter
  registration_date: DatetimeFilter
  body: RichTextFilter
  preview_image: ImageFilter
  flyer: ImageFilter
}

type Dual_sportConnectionEdges {
  cursor: String!
  node: Dual_sport
}

type Dual_sportConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [Dual_sportConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateEnduro_event(relativePath: String!, params: Enduro_eventMutation!): Enduro_event!
  createEnduro_event(relativePath: String!, params: Enduro_eventMutation!): Enduro_event!
  updateHarescramble_event(relativePath: String!, params: Harescramble_eventMutation!): Harescramble_event!
  createHarescramble_event(relativePath: String!, params: Harescramble_eventMutation!): Harescramble_event!
  updateFastkidz_event(relativePath: String!, params: Fastkidz_eventMutation!): Fastkidz_event!
  createFastkidz_event(relativePath: String!, params: Fastkidz_eventMutation!): Fastkidz_event!
  updateSpecial_event(relativePath: String!, params: Special_eventMutation!): Special_event!
  createSpecial_event(relativePath: String!, params: Special_eventMutation!): Special_event!
  updateDual_sport(relativePath: String!, params: Dual_sportMutation!): Dual_sport!
  createDual_sport(relativePath: String!, params: Dual_sportMutation!): Dual_sport!
}

input DocumentUpdateMutation {
  blog: BlogMutation
  enduro_event: Enduro_eventMutation
  harescramble_event: Harescramble_eventMutation
  fastkidz_event: Fastkidz_eventMutation
  special_event: Special_eventMutation
  dual_sport: Dual_sportMutation
  relativePath: String
}

input DocumentMutation {
  blog: BlogMutation
  enduro_event: Enduro_eventMutation
  harescramble_event: Harescramble_eventMutation
  fastkidz_event: Fastkidz_eventMutation
  special_event: Special_eventMutation
  dual_sport: Dual_sportMutation
}

input BlogMutation {
  draft: Boolean
  title: String
  author: String
  date: String
  image: String
  bg_image: String
  categories: [String]
  description: String
  tags: [String]
  body: JSON
}

input Enduro_eventMutation {
  title: String
  description: String
  club: [String]
  event_datetime: String
  location: String
  event_format: [String]
  closed_course: [String]
  gas_away: [String]
  start_grid: String
  key_time: String
  check_in_time: String
  registration_date: String
  body: JSON
  preview_image: String
}

input Harescramble_eventMutation {
  title: String
  description: String
  club: [String]
  event_datetime: String
  location: String
  check_in_time: String
  registration_date: String
  body: JSON
  preview_image: String
  flyer: String
}

input Fastkidz_eventMutation {
  title: String
  description: String
  club: [String]
  event_datetime: String
  location: String
  check_in_time: String
  registration_date: String
  body: JSON
  preview_image: String
  flyer: String
}

input Special_eventMutation {
  title: String
  description: String
  club: [String]
  event_datetime: String
  location: String
  check_in_time: String
  registration_date: String
  body: JSON
  preview_image: String
  flyer: String
}

input Dual_sportMutation {
  title: String
  description: String
  club: [String]
  event_datetime: String
  location: String
  check_in_time: String
  registration_date: String
  body: JSON
  preview_image: String
  flyer: String
}

schema {
  query: Query
  mutation: Mutation
}
